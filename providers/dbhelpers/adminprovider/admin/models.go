// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package admin

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Roles string

const (
	RolesAdmin    Roles = "admin"
	RolesDealer   Roles = "dealer"
	RolesRetailer Roles = "retailer"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles
	Valid bool // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

type User struct {
	ID          int64
	Name        string
	Age         int32
	Password    string
	Address     string
	CountryCode string
	Email       string
	Phone       string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ArchivedAt  sql.NullTime
}

type UserProfile struct {
	ID          int64
	UserID      int32
	CompanyName sql.NullString
	Country     sql.NullString
	State       sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ArchivedAt  sql.NullTime
}

type UserRole struct {
	ID         int64
	UserID     int32
	Role       Roles
	ArchivedAt sql.NullTime
}
