// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package admin

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, age, 	Password, Address, Country_code, Email, Phone, Created_at, Updated_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
    RETURNING id, name, age, password, address, country_code, email, phone, created_at, updated_at, archived_at
`

type CreateUserParams struct {
	Name        string
	Age         int32
	Password    string
	Address     string
	CountryCode string
	Email       string
	Phone       string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Age,
		arg.Password,
		arg.Address,
		arg.CountryCode,
		arg.Email,
		arg.Phone,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Password,
		&i.Address,
		&i.CountryCode,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const createUserProfiles = `-- name: CreateUserProfiles :one
INSERT INTO user_profiles (
    user_id, company_name, country, state
) VALUES (
             $1, $2, $3, $4
         )
RETURNING id, user_id, company_name, country, state, created_at, updated_at, archived_at
`

type CreateUserProfilesParams struct {
	UserID      int32
	CompanyName sql.NullString
	Country     sql.NullString
	State       sql.NullString
}

func (q *Queries) CreateUserProfiles(ctx context.Context, arg CreateUserProfilesParams) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfiles,
		arg.UserID,
		arg.CompanyName,
		arg.Country,
		arg.State,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyName,
		&i.Country,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const createUserRoles = `-- name: CreateUserRoles :one
INSERT INTO user_roles (
    user_id, role
) VALUES (
             $1, $2
         )
RETURNING id, user_id, role, archived_at
`

type CreateUserRolesParams struct {
	UserID int32
	Role   Roles
}

func (q *Queries) CreateUserRoles(ctx context.Context, arg CreateUserRolesParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, createUserRoles, arg.UserID, arg.Role)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Role,
		&i.ArchivedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, age, password, address, country_code, email, phone, created_at, updated_at, archived_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Password,
		&i.Address,
		&i.CountryCode,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArchivedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, age, password, address, country_code, email, phone, created_at, updated_at, archived_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Password,
			&i.Address,
			&i.CountryCode,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
